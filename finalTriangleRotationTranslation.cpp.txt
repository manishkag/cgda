#include <GL/freeglut.h>

float triangleX = 0.0;
float triangleY = 0.0;
float rotationAngle = 0.0;
float translationStep = 0.05;
float rotationStep = 5.0;

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1.0, 1.0, 1.0);
    glLoadIdentity();

    // Apply translation and rotation
    glTranslatef(triangleX, triangleY, 0.0);
    glRotatef(rotationAngle, 0.0, 0.0, 1.0);

    // Draw the triangle
    glBegin(GL_TRIANGLES);
    glVertex2f(0.0, 0.2);
    glVertex2f(-0.2, -0.2);
    glVertex2f(0.2, -0.2);
    glEnd();

    glFlush();
}

void reshape(int w, int h) {
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-1.0, 1.0, -1.0, 1.0);
    glMatrixMode(GL_MODELVIEW);
}

void keyboard(unsigned char key, int x, int y) {
    switch (key) {
    case 'w':
    case 'W':
        triangleY += translationStep;  // Move the triangle up
        break;
    case 's':
    case 'S':
        triangleY -= translationStep;  // Move the triangle down
        break;
    case 'a':
    case 'A':
        triangleX -= translationStep;  // Move the triangle left
        break;
    case 'd':
    case 'D':
        triangleX += translationStep;  // Move the triangle right
        break;
    case 'r':
    case 'R':
        rotationAngle += rotationStep;  // Rotate the triangle clockwise
        break;
    case 'l':
    case 'L':
        rotationAngle -= rotationStep;  // Rotate the triangle counterclockwise
        break;
    }

    glutPostRedisplay();  // Trigger redrawing
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Triangle Translation and Rotation");

    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);  // Register the keyboard callback

    glutMainLoop();
    return 0;
}
